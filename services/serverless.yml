service: serverless-template

frameworkVersion: '4'

provider:
  name: aws
  runtime: provided.al2023
  region: us-east-1
  environment: ${file(./env.js)}
  stage: ${opt:stage}

package:
  individually: true
  patterns:
    - '!./**'
    - './bin/**/*.zip'

plugins:
  - 'serverless-offline'
  - 'serverless-dynamodb'


#   ____ __ __ __  __   ___ ______ __   ___   __  __  __ 
#  ||    || || ||\ ||  //   | || | ||  // \\  ||\ || (( \
#  ||==  || || ||\\|| ((      ||   || ((   )) ||\\||  \\ 
#  ||    \\_// || \||  \\__   ||   ||  \\_//  || \|| \_))
# ========================================================

functions:
  getSomething:
    handler: bootstrap
    package:
      artifact: bin/getSomething.zip 
    events:
      - http:
          path: getSomething
          method: get
    role: serverlessTemplateApiRole
  
  postSomething:
    handler: bootstrap
    package:
      artifact: bin/postSomething.zip 
    events:
      - http:
          path: postSomething
          method: post
    role: serverlessTemplateApiRole
  
  patchSomething:
    handler: bootstrap
    package:
      artifact: bin/patchSomething.zip 
    events:
      - http:
          path: patchSomething
          method: patch
    role: serverlessTemplateApiRole

  deleteSomething:
    handler: bootstrap
    package:
      artifact: bin/deleteSomething.zip 
    events:
      - http:
          path: deleteSomething
          method: delete
    role: serverlessTemplateApiRole

#  ____   ____  __    ___   __ __ ____    ___  ____  __ 
#  || \\ ||    (( \  // \\  || || || \\  //   ||    (( \
#  ||_// ||==   \\  ((   )) || || ||_// ((    ||==   \\ 
#  || \\ ||___ \_))  \\_//  \\_// || \\  \\__ ||___ \_))
# ========================================================

resources: 
  Resources: 

    ## COGNITO RESOURCES ##

    serverlessTemplateUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverlessTemplate-${opt:stage}
        UsernameAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: 
          - email
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:us-east-1:827183242253:identity/marneinnovationcenter.com
          ReplyToEmailAddress: admin@marneinnovationcenter.com
          From: admin@marneinnovationcenter.com
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
      
    serverlessTemplateUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: serverlessTemplate-${opt:stage}
        UserPoolId: !Ref serverlessTemplate
    
    ## ROLES AND PERMISSIONS ##
    
    serverlessTemplateLambdaPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: serverlessTemplateLambdaPolicy-${opt:stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:TagResource
                - logs:PutRetentionPolicy
              Resource:
                - !Join
                  - ":"
                  - - "arn:aws:logs"
                    - Ref: "AWS::Region"
                    - Ref: "AWS::AccountId"
                    - "log-group:/aws/lambda/*:*:*"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DetachNetworkInterface
                - ec2:DeleteNetworkInterface
              Resource: "*"
        Roles: 
          - Ref: serverlessTemplateApiRole 
    
    mcatApiPolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: serverlessTemplateApiRolePolicy-${opt:stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:Update*

              Resource: 
                - !GetAtt serverlessTemplateSomethingsTable.Arn 
        Roles: 
          - Ref: serverlessTemplateApiRole 

    ## DYNAMODB TABLES ##

    serverlessTemplateSomethingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessTemplateSomethingsTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

custom:
  serverless-offline:
      httpPort: 4000
      host: localhost
      logLevel: debug
      useDocker: true
      stages:
        - local
    
  dynamodb:
    start:
      docker: true
      port: 8080
      inMemory: true
      migrate: true
      seed: false
      convertEmptyValues: true
    # seed:
    #   domain:
    #     sources:
    #       - table: serverlessTemplateSomethingsTable-${opt:stage}
    #         sources: [./seedData/deviceTableSeed.json]
    stages:
      - local
      - local-server